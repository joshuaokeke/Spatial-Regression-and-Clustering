library(car)
library(spatialreg)
library(spdep)
library(classInt)
library(spgwr)
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Assuming bos.gwr$SDF is an sf object and ggplot2 is installed
if (requireNamespace("ggplot2", quietly = TRUE) && inherits(bos.gwr$SDF, "sf")) {
library(ggplot2)
ggplot(data = bos.gwr$SDF) +
geom_sf(aes(fill = CRIM_t), lwd = 0.1) +
labs(title = "Standardized CRIM Coefficients (t-values)",
fill = "t-Value") +
theme_minimal()
} else {
stop("ggplot2 is needed for this plot type or bos.gwr$SDF is not an sf object.")
}
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Assuming bos.gwr$SDF is an sf object and ggplot2 is installed
if (requireNamespace("ggplot2", quietly = TRUE) && inherits(bos.gwr$SDF, "sf")) {
library(ggplot2)
ggplot(data = bos.gwr$SDF) +
geom_sf(aes(fill = CRIM_t), lwd = 0.1) +
labs(title = "Standardized CRIM Coefficients (t-values)",
fill = "t-Value") +
theme_minimal()
} else {
stop("ggplot2 is needed for this plot type or bos.gwr$SDF is not an sf object.")
}
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Plot the t-values using spplot
spplot(bos.gwr$SDF, "CRIM_t", main="t-values for CRIM Coefficients",
col.regions=colorRampPalette(c("blue", "white", "red"))(100))
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Plot the t-values using spplot
spplot(bos.gwr$SDF, "CRIM_t", main="t-values for CRIM Coefficients",
col.regions=colorRampPalette(c("blue", "white", "red"))(100))
# Load the spgwr package for GWR (if not already loaded)
if (!require(spgwr)) install.packages("spgwr")
library(spgwr)
# Fit a GWR model (example code - adjust according to your actual formula and data)
# gwr_model <- gwr(y ~ x1 + x2, data=your_data, coords=cbind(longitude, latitude), bandwidth=bw, adaptive=T)
# Now, replace 'gwr_model' with your actual GWR model object, 'bos.gwr'
# Summarize the GWR model
gwr_summary <- summary(bos.gwr)
# Print the summary to the console
print(gwr_summary)
# If you want to view the regression coefficients table
coef_table <- coef(gwr_summary)
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Plot the t-values using spplot
spplot(bos.gwr$SDF, "CRIM_t", main="t-values for CRIM Coefficients",
col.regions=colorRampPalette(c("blue", "white", "red"))(100))
# Load the spgwr package (install if you haven't already)
if (!require(spgwr)) install.packages("spgwr")
library(spgwr)
# Print the summary of the GWR model
summary(bos.gwr)
# If you need to extract and view the regression coefficients table
# This will depend on the structure of the GWR object, here's a general way:
if("coefficients" %in% slotNames(bos.gwr)) {
coeffs <- bos.gwr@coefficients
print(coeffs)
} else {
# If the object does not have a slot named 'coefficients', you might need to
# explore the structure of the object
print(str(bos.gwr))
}
# The code above will vary depending on the actual structure of your bos.gwr object
# and may need to be adapted if 'bos.gwr' does not follow the expected structure.
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Plot the t-values using spplot
spplot(bos.gwr$SDF, "CRIM_t", main="t-values for CRIM Coefficients",
col.regions=colorRampPalette(c("blue", "white", "red"))(100))
# Load the spgwr package (install if you haven't already)
if (!require(spgwr)) install.packages("spgwr")
library(spgwr)
# Print the summary of the GWR model
summary(bos.gwr)
if("coefficients" %in% slotNames(bos.gwr)) {
coeffs <- bos.gwr@coefficients
print(coeffs)
} else {
# If the object does not have a slot named 'coefficients', you might need to
# explore the structure of the object
print(str(bos.gwr))
}
# The code above will vary depending on the actual structure of your bos.gwr object
# and may need to be adapted if 'bos.gwr' does not follow the expected structure.
# Plot the t-values using spplot
spplot(bos.gwr, zcol = "CRIM_t", main = "t-values for CRIM Coefficients",
col.regions = rev(brewer.pal(9, "RdBu")))
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Plot the t-values using spplot
spplot(bos.gwr$SDF, "CRIM_t", main="t-values for CRIM Coefficients",
col.regions=colorRampPalette(c("blue", "white", "red"))(100))
# Load the spgwr package (install if you haven't already)
if (!require(spgwr)) install.packages("spgwr")
library(spgwr)
# Print the summary of the GWR model
summary(bos.gwr)
if("coefficients" %in% slotNames(bos.gwr)) {
coeffs <- bos.gwr@coefficients
print(coeffs)
} else {
# If the object does not have a slot named 'coefficients', you might need to
# explore the structure of the object
print(str(bos.gwr))
}
# The code above will vary depending on the actual structure of your bos.gwr object
# and may need to be adapted if 'bos.gwr' does not follow the expected structure.
# Load the required packages
library(spgwr)
library(RColorBrewer)
# Plot the t-values using spplot
spplot(bos.gwr, zcol = "CRIM_t", main = "t-values for CRIM Coefficients",
col.regions = rev(brewer.pal(9, "RdBu")))
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Plot the t-values using spplot
spplot(bos.gwr$SDF, "CRIM_t", main="t-values for CRIM Coefficients",
col.regions=colorRampPalette(c("blue", "white", "red"))(100))
# Load the spgwr package (install if you haven't already)
if (!require(spgwr)) install.packages("spgwr")
library(spgwr)
# Print the summary of the GWR model
summary(bos.gwr)
if("coefficients" %in% slotNames(bos.gwr)) {
coeffs <- bos.gwr@coefficients
print(coeffs)
} else {
# If the object does not have a slot named 'coefficients', you might need to
# explore the structure of the object
print(str(bos.gwr))
}
# The code above will vary depending on the actual structure of your bos.gwr object
library(spplot)
install.packages("spplot")
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Plot the t-values using spplot
spplot(bos.gwr$SDF, "CRIM_t", main="t-values for CRIM Coefficients",
col.regions=colorRampPalette(c("blue", "white", "red"))(100))
# Load the required packages
library(spgwr)
library(RColorBrewer)
# Plot the t-values using spplot
spplot(bos.gwr, zcol = "CRIM_t", main = "t-values for CRIM Coefficients",
col.regions = brewer.pal(9, "RdBu"), at = pretty(rangeValues(bos.gwr$SDF$CRIM_t), n = 9))
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Plot the t-values using spplot
spplot(bos.gwr$SDF, "CRIM_t", main="t-values for CRIM Coefficients",
col.regions=colorRampPalette(c("blue", "white", "red"))(100))
# Load the required packages
library(spgwr)
library(RColorBrewer)
# Print the summary of the GWR model
summary(bos.gwr)
# Check if the model object has a 'coefficients' slot
if ("coefficients" %in% slotNames(bos.gwr)) {
coeffs <- bos.gwr@coefficients
print(coeffs)
} else {
# If the object does not have a slot named 'coefficients', print its structure
print(str(bos.gwr))
}
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Plot the t-values using spplot
spplot(bos.gwr$SDF, "CRIM_t", main="t-values for CRIM Coefficients",
col.regions=colorRampPalette(c("blue", "white", "red"))(100))
# Load the required packages
library(spgwr)
library(RColorBrewer)
# Print the summary of the GWR model
summary(bos.gwr)
# Check if the model object has a 'coefficients' slot
if ("coefficients" %in% slotNames(bos.gwr)) {
coeffs <- bos.gwr@coefficients
print(coeffs)
} else {
# If the object does not have a slot named 'coefficients', print its structure
print(str(bos.gwr))
}
library(spgwr)
# Generate summary for the GWR model
bos.gwr.summary <- summary(bos.gwr)
print(bos.gwr.summary)
# Create a regression table from GWR model results
regression_table <- data.frame(
Coefficients = bos.gwr$SDF$beta,
Std.Errors = bos.gwr$SDF$beta.se,
t.values = bos.gwr$SDF$beta / bos.gwr$SDF$beta.se,
# Calculate p-values based on the t-values; this might require additional steps to get the degrees of freedom
p.values = 2 * (1 - pt(abs(bos.gwr$SDF$beta / bos.gwr$SDF$beta.se), df = bos.gwr$df))
)
library(spgwr)
# Generate summary for the GWR model
bos.gwr.summary <- summary(bos.gwr)
print(bos.gwr.summary)
# Run the summary on the GWR model
bos.gwr.summary <- summary(bos.gwr)
# Print the summary to the console
print(bos.gwr.summary)
regression_table <- data.frame(
Coefficients = bos.gwr.summary$SDF$beta,
Std.Errors = bos.gwr.summary$SDF$beta.se,
t.values = bos.gwr.summary$SDF$beta / bos.gwr.summary$SDF$beta.se
# p-values can be calculated from t-values if we know the degrees of freedom,
# which might not be directly available for GWR
)
library(spgwr)
# Run the summary on the GWR model
bos.gwr.summary <- summary(bos.gwr)
# Print the summary to the console
print(bos.gwr.summary)
regression_table <- data.frame(
Coefficients = bos.gwr.summary$SDF$beta,
Std.Errors = bos.gwr.summary$SDF$beta.se,
t.values = bos.gwr.summary$SDF$beta / bos.gwr.summary$SDF$beta.se
# p-values can be calculated from t-values if we know the degrees of freedom,
# which might not be directly available for GWR
)
library(spgwr)
# Run the summary on the GWR model
bos.gwr.summary <- summary(bos.gwr)
# Print the summary to the console
print(bos.gwr.summary)
coefficients <- bos.gwr$SDF@data$beta
std_errors <- bos.gwr$SDF@data$beta.se
# Calculating the t-values
t_values <- coefficients / std_errors
# Creating a data frame for the regression table
regression_table <- data.frame(Coefficients = coefficients, Std.Errors = std_errors, t.values = t_values)
# Display the regression table
print(regression_table)
# To print the summary of GWR, just use the summary function directly
bos.gwr.summary <- summary(bos.gwr)
# Print the summary to the console
print(bos.gwr.summary)
# We won't calculate p-values
library(spgwr)
# Run the summary on the GWR model
bos.gwr.summary <- summary(bos.gwr)
# Print the summary to the console
print(bos.gwr.summary)
coefficients <- bos.gwr$SDF@data$beta
std_errors <- bos.gwr$SDF@data$beta.se
# Calculating the t-values
t_values <- coefficients / std_errors
# Creating a data frame for the regression table
regression_table <- data.frame(Coefficients = coefficients, Std.Errors = std_errors, t.values = t_values)
# Display the regression table
print(regression_table)
# To print the summary of GWR, just use the summary function directly
bos.gwr.summary <- summary(bos.gwr)
# Print the summary to the console
print(bos.gwr.summary)
# Run the summary on the GWR model
bos.gwr.summary <- summary(bos.gwr)
# Print the summary to the console
print(bos.gwr.summary)
coefficients <- bos.gwr$SDF@data$beta
std_errors <- bos.gwr$SDF@data$beta.se
# Calculating the t-values
t_values <- coefficients / std_errors
# Creating a data frame for the regression table
regression_table <- data.frame(Coefficients = coefficients, Std.Errors = std_errors, t.values = t_values)
# Display the regression table
print(regression_table)
# To print the summary of GWR, just use the summary function directly
bos.gwr.summary <- summary(bos.gwr)
# Print the summary to the console
print(bos.gwr.summary)
# Run the summary on the GWR model
bos.gwr.summary <- summary(bos.gwr)
# Print the summary to the console
print(bos.gwr.summary)
coefficients <- bos.gwr$SDF@data$beta
std_errors <- bos.gwr$SDF@data$beta.se
# Calculating the t-values
t_values <- coefficients / std_errors
# Creating a data frame for the regression table
regression_table <- data.frame(Coefficients = coefficients, Std.Errors = std_errors, t.values = t_values)
# Display the regression table
print(regression_table)
# To print the summary of GWR, just use the summary function directly
bos.gwr.summary <- summary(bos.gwr)
# Print the summary to the console
print(bos.gwr.summary)
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Plot the t-values using spplot
spplot(bos.gwr$SDF, "CRIM_t", main="t-values for CRIM Coefficients",
col.regions=colorRampPalette(c("blue", "white", "red"))(100))
# Load the required packages
library(spgwr)
library(RColorBrewer)
# Print the summary of the GWR model
summary(bos.gwr)
# Check if the model object has a 'coefficients' slot
if ("coefficients" %in% slotNames(bos.gwr)) {
coeffs <- bos.gwr@coefficients
print(coeffs)
} else {
# If the object does not have a slot named 'coefficients', print its structure
print(str(bos.gwr))
}
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Plot the t-values using spplot
spplot(bos.gwr$SDF, "CRIM_t", main="t-values for CRIM Coefficients",
col.regions=colorRampPalette(c("blue", "white", "red"))(100))
library(ggplot2)
#plot t values (CRIME)
bos.gwr$SDF$CRIM_t <- bos.gwr$SDF$CRIM/bos.gwr$SDF$CRIM_se
tCRIM<-bos.gwr$SDF$CRIM_t
display.brewer.pal(3, "RdBu")
colors <- brewer.pal(3, "RdBu") # Stores colors in object color
color.category.reg <- findInterval(tCRIM,
c(min(tCRIM)-.0001, -1.96, -1.64,
max(tCRIM)+.0001),all.inside=TRUE)
#classes_fx <- classIntervals(tCRIM, n=5, style="quantile")
#cols <- findColours(classes_fx,pal)
plot(Boston,col=colors[color.category.reg], border="transparent")
labels <- c("<-1.96", " -1.96 to -1.64", "Not significant")
legend("bottom", legend=labels, fill=colors, cex=0.8,
y.intersp = 0.99, bty="n")
# Plot the t-values using spplot
spplot(bos.gwr$SDF, "CRIM_t", main="t-values for CRIM Coefficients",
col.regions=colorRampPalette(c("blue", "white", "red"))(100))
# Generate summary for the GWR model
bos.gwr.summary <- summary(bos.gwr, verbose = TRUE)  # the verbose = TRUE might provide more info
# Look at the structure of the summary to find coefficients and standard errors
str(bos.gwr.summary)
